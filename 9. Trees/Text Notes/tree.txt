****************************   Binary Tree   **********************************

** A tree is a nonlinear hierarchical data structure that consists of nodes connected by edges.

** if there are n nodes then the number of edges is n-1.

** First Node on the top is root node.

** The node which is a immediate predecessor of a node is called the parent node of that node.

** The node which is the immediate successor of a node is called the child node of that node

** Siblings are the children of same parent.

** Any successor node on the path from the that node to leaf node is called decendent

** Any predecessor nodes on the path from the root node to that node are called Ancestors of that node

** Degree of a node is the immediate children of that node.

** Degree of a tree is the maximum degree of a node.

** Nodes that is degree is 0 is called leaf nodes/external nodes.

** Nodes that is degree is greater then 0  is called non-leaf nodes/internal nodes.

** Levels of a node is the maximum path to go the leaf node.

** Depth is the number of edges from root node to that node.

** Height of a node is the number of edges in the longest path from that node to a leaf node.



************************** Types of Binary Tree    *****************

1. Full Binary Tree : Each node either 0 or 2 children.

2. Complete Binary Tree : All levels ar Completely filled except last level.
  Last level has all nodes as left as possible.

3. Perfect Binary Tree : All leaf nodes are same level.

*************************** Unleveled nodes ***************************  

** If n number of nodes are given then the (2nCn)/(n+1) number of binary trees are generated. This the combination formula of catalan Number .

** Summation of i=1 to n  then T(i-1)*T(n-i). This is the recursive formula of catalan number.

** if n nodes are given then the 2^n-1 number of binary trees are possible with maximum height.



*************************** Leveled Nodes  ***************************

** If n number of nodes are given then the (2nCn)/(n+1) * n! number of binary trees are generated for leveled Nodes.



***************************  Heights Vs nodes  ***************************

** If Height is given the minimum number of nodes n = h+1
** If Height is given the maximum number of nodes n = (2^h+1) -1

** If nodes is given the minimum height is h = log2(n+1) -1
** If nodes is given the maximum height is h = n-1

## Height of a Binary Tree  log2(n+1)-1 <= h <+ n-1
## Number of nodes in Binary Tree h+1 <= n <= (2^h+1)-1

** In Binary tree degree(0) = degree(2) + 1



********************** Strict/Proper/Complete Binary Tree ********************** 

** A node must have degree (0) or degree(2) 

** if height is given the minimum number of nodes n = 2*h +1
** if height is given the maximum number of nodes n = (2^h+1)-1

** if node is given the minimum height h = log2(n+1)-1   
** if node is given the maximum height h = (n-1)/2

** Number of external nodes = internal nodes + 1



********************************* n-ary Tree  ***************************

** Every Node can have 0-n number of nodes but not greater then n.
** Strict n-ary tree must have 0 or n nodes for each node.

** For strict m-ary trees 
   # if height is given minimum nodes is n = m*h+1
   # if height is given maximum nodes is n = (m^h+1)-1/(m-1)

   # if nodes is given minimum height is n = log base m [n*(m-1)+1]-1
   # if height is given maximum nodes is h = (n-1)/m 

   ## Number of external nodes = (m-1)*i +1




***************************  Representing Binary Tree  ***********************

** if element is at index i then the [array index start From 0]
    ## left child at index = 2*i +1
    ## Right child at index = 2*i +2
    ## parent of any node = (i-1)/2


** if element is at index i then the [array index start From 1]
    ## left child at index = 2*i
    ## Right child at index = 2*i +1
    ## parent of any node = i/2

** if there are n nodes then there is n+1 null.



**************************** Tree Traversal  ***********************************

** Preorder : Root -> Left -> Right

** Inorder : Left -> Root -> Right

** Postorder : Left -> Right -> Root

** Level : Level By Level